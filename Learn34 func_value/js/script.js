//Функции также можно рассматривать и как значения
//Это значение в действительности является ссылкой на функцию, и как вы уже видели, независимо от 
//способа определения функции (через объявление или функциональное выражение) вы получаете ссылку на эту функцию.


//quack определяется объявлением функции, а fly — функциональным выражением. 
//В обоих случаях создаются ссылки на функции, которые сохраняются в переменных 
//quack и fly соответственно.  *С объявлением функции JavaScript берет на себя присваивание ссылки переменной с заданным вами именем (в данном случае quack).
function quack(num) {
	for (var i = 0; i < num; i++) {
	console.log("Quack!");
	}
}

//С функциональным выражением необходимо присвоить полученную ссылку переменной самостоятельно. В данном случае ссылка сохраняется в переменной fly.
var fly = function(num) {
	for (var i = 0; i < num; i++) {
	console.log("Flying!");
	}
}
//После того как значение из fly будет присвоено superFly, переменная superFly содержит ссылку 
//на функцию. Добавив круглые скобки и аргумент, мы сможем вызвать функцию!
var superFly = fly;
superFly(2);
//И хотя переменная quack была создана по объявлению функции, хранящееся в quack значение тоже представляет 
//собой ссылку на переменную, поэтому мы можем присвоить его переменной superQuack и вызвать функцию.
var superQuack = quack;
superQuack(3);

//!!! Другими словами, ссылка остается ссылкой независимо от того, 
//как она была создана (по объявлению функции или функциональному выражению)!
//Начинайте думать о функциях как о значениях —
//таких же, как числа, строки, булевские значения или объекты. Функциональные значения отличаются от других прежде всего тем,
//что эти значения могут использоваться для вызова.

//Интересный пример

var age = prompt('Сколько вам лет?');

var sayHi = (age >= 18) ?
  function() { alert('Прошу Вас!');  } :
  function() { alert('До 18 нельзя'); };

sayHi();


//Функция выводит вопрос на подтверждение question и, в зависимости от согласия пользователя, вызывает функцию yes() или no():
function ask(question, yes, no) {
    if (confirm(question)) yes()
    else no();
  }
function showOk() {
  alert( "Вы согласились." );
}
function showCancel() {
  alert( "Вы отменили выполнение." );
}
// использование
ask("Вы согласны?", showOk, showCancel);




//Тоже самое, но более коротко:
//Здесь функции объявлены прямо внутри вызова ask(...), даже без присвоения им имени.
//Функциональное выражение, которое не записывается в переменную, называют анонимной функцией.
function ask(question, yes, no) {
  if (confirm(question)) yes()
  else no();
}
ask(
  "Вы согласны?",
  function() { alert("Вы согласились."); },
  function() { alert("Вы отменили выполнение."); }
); 






