// ОБЛАСТЬ ДЕЙСТВИЯ ИЛИ ВИДИМОСТИ

// Размещение функции внутри другой функции влияет на видимость этой функции внутри вашего кода

// Функции, определяемые на верхнем уровне кода, обладают глобальной областью действия, тогда как функции ,
// определяемые внутри других функций, обладают локальной видимостью.


var migrating = true;

// Все, что определяется на верхнем уровне кода, имеет глобальную область действия. Следовательно, 
// переменные fly и quack являются глобальными. (НО помните, функция fly определяется только после
// того, как это функциональное выражение будет ОБРАБОТАНО!)
var fly = function(num) {
	var sound = "Flying";

	// Функция wingFlapper определяется объявлением в функции fly. Ее областью действия является
	// вся функция fly, и она определена в любой точки тела функции fly.
	function wingFlapper() {
		console.log(sound);
	}
	for (var i = 0; i < num; i++) {
		wingFlapper();
	}
};

// Функция quacker определяется функциональным выражением в функции quack. Ее областью действия является
// ВСЯ функция quack, однако определена она только на участке от функционального выражения до конца тела функции.
function quack(num) {
	var sound = "Quack";
	var quacker = function() {
		console.log(sound);
	};

	//ФУНКЦИЯ quacker ОПРЕДЕЛЕНА ТОЛЬКО ЗДЕСЬ
	for (var i = 0; i < num; i++) {
		quacker();
	}
}
if (migrating) {
	quack(4);
	fly(4);
}


// ЛЕКСИЧЕСКАЯ ОБЛАСТЬ ДЕЙСТВИЯ (тоесть для определения области действия переменной достаточно прочитать
// структуру кода (то есть для ее определения не нужно дожидаться  выполнения программы!)
var justAVar = "Oh, don't you worry about it, I'm GLOBAL"; //Глобальная переменная

function whereAreYou() { // Эта функция определяет новую ЛЕКСИЧЕСКУЮ область действия..
	var justAVar = "Just an every day LOCAL"; // ..в которой существует ЛОКАЛЬНАЯ переменная justAVar,
											// ЗАМЕНЯЮЩАЯ ГЛОБАЛЬНУЮ переменную с тем же именем.
	return justAVar; // При вызове этой функции ВОЗВРАЩАЕТСЯ переменная JustAVar. Но какая?
}					// Мы используем лексическую область действия, поэтому значение justAVar определяется областью
					// действия ближайшей функции. И если найти переменную там не удается, то поиск переходит 
					// к глобальной области действия!
var result = whereAreYou();
console.log(result); // При вызове возвращается значение ЛОКАЛЬНОЙ ПЕРЕМЕННОЙ justAVar

//Также, НО со вложенной функцией!
var justAVar = "Oh, don't you worry about it, I'm GLOBAL"; //Глобальная переменная

function whereAreYou() { 
	var justAVar = "Just an every day LOCAL"; 
	function inner() {
		return justAVar; // ЗДЕСЬ уже ВЛОЖЕННАЯ ФУНКЦИЯ, которая обращается к переменной justAVar. И снова здесь
						// выбирается переменная из БЛИЖАЙШЕЙ внешней функции. Тоесть СНОВА ЛОКАЛЬНАЯ
	}
	return inner(); //Возвращаем и ВЫЗЫВАЕМ внутреннюю функцию
}					
					
					
var result = whereAreYou();
console.log(result); // При вызове возвращается значение ЛОКАЛЬНОЙ ПЕРЕМЕННОЙ justAVar


//ЧЕМ ИНТЕРЕСНАЯ ЛЕКСИЧЕСКАЯ ОБЛАСЬ ДЕЙСТВИЯ? (На предыдущем примере!)
var justAVar = "Oh, don't you worry about it, I'm GLOBAL"; 

//ЗАМЫКАНИЕ!
function whereAreYou() { 
	var justAVar = "Just an every day LOCAL"; 
	function inner() {
		return justAVar; 
						
	}
	return inner; // Здесь уже ВОЗВРАЩАЕМ функцию вместо вызова!
}					
					
var innerFunction = whereAreYou(); // При вызове whereAreYou мы получаем ссылку на внутреннюю функцию inner, которая присваивается
								   // переменной innerFunction. Затем мы вызываем innerFunction, 					
var result = innerFunction();      // сохраняем вывод в переменной result и выводим ее значение.
								    
console.log(result);  // интересно какая же переменная justAVar будеи мспользована здесь при вызове inner (под личиной innerFunction)?
					  // локальная или глобальная?




