// ОБЪЕКТЫ И ПРОТОТИПЫ (НАСЛЕДОВАНИЕ ЧЕРЕЗ ПРОТОТИПЫ)!
// При создании множества объектов из одного конструктора возникает проблема, что свойства все разыне, а методы дублируются.
// Но в JS это решается НАСЛДОВАНИЕМ свойств и поведения от ДРУГИХ объектов!
// Тоесть НАСЛЕДОВАНИЕ ЧЕРЕЗ ПРОТОТИПЫ!
// ВСЯ СУТЬ этой схемы заключается в наследовании и повторном использовании существующих свойств (включая методы), 
// с расширением свойств во вновь созданном объекте.

// К ПРИМЕРУ ПРОТОТИП СОБАКИ
/******************
*    ПРОТОТИП     * <- Прототип для создания собак: объект со свойствами и методами, которые могут понадобится каждой собаке.
*******************
*species: "Canine"* <- Содержит свойства, необходимые каждой собаке. Прототип НЕ ВКЛЮЧАЕТ уникальные свойства! (Клички, порода, вес)
*******************
*bark()           *
*run()            * <- Поведение, которое должно поддерживаться всеми создаваемыми собаками. 
*wag()            *
*******************/ 

/*** Имея прототип собаки, мы можем создавать объекты собак, наследующие свойства прототипа. Объект собаки также может
 *** дополнять набор свойств прототипа другим свойствами и поведением, присущими конкретным собакам. Например, мы можем
 *** добавить в объект каждой собаки свойства для клички, породы и веса. ТОЕСТЬ если какой-либо собаке нужно будет лаять,
 *** бегать или махать хвостом, она может воспользоваться поведением, унаследованным от прототипа. 
 *** - И ПОМНИТЕ! В ПРОТОТИП ВКЛЮЧАЮТСЯ МЕТОДЫ И СВОЙСТВА, ОБЩИЕ ДЛЯ ВСЕХ СОБАК, ПОТОМУ ЧТО ОНИ БУДУТ НАСЛЕДОВАТЬСЯ 
 *** - ВСЕМИ СОБАКАМИ*/

 // КАК РАБОТАЕТ НАСЛЕДОВАНИЕ?
  // К примеру, мы обращаемся к методу bark() собаки Fido, но в объекте Fido этого метода нет. Тогда мы идем выше к ПРОТОТИПУ.
  // НАКОНЕЦ находим метод bark() и вызываем его.
  // Свойства работают примерно ТАКЖЕ.


// ПЕРЕОПРЕДЕЛЕНИЕ ПРОТОТИПА!
// ***Что если, собаке НЕ НРАВИТСЯ метод bark, и она хочет лаять громчке и буквами WOOF?
// Даже если ваш объект что-то наследует от прототипа, это не значит, что вам придется непременно пользоваться "наследством".
// Свойства и методы всегда можно ПЕРЕОПРЕДЕЛИТЬ в объекте. Переопределение работает, потому что JavaScript всегда обращается
// за свойством к экземпляру (тоесть конкретному объекту собаки) ДО ТОГО, как продолжить поиски в прототипе. СЛЕДОВАТЕЛЬНО,
// если вы хотите использовать для объекта собаки - spot нестандартный метод bark, вам достаточно ВКЛЮЧИТЬ свой реализацию
// в объекте spot. 

// ИТАК как же создать или получить ПРОТОТИП?
/*
Dog.prototype // Присмотревшись к конструктору Dog, вы обнаружите в нем свойство prototype, в котором хранится ссылка
*/			  // на фактический прототип.
// НО, Dog ведь это функция-конструктор!? Ответ: В JS ФУНКЦИИ ЯВЛЯЮТСЯ ОБЪЕКТАМИ! Фактически ВСЕ базируется на объектах.

// ВАЖНО! ОБЪЕКТ-ПРОТОТИП задается в свойстве prototype конструктора Dog! Но КАКИЕ СВОЙСТВА и МЕТОДЫ включает прототип?
// ПОКА вы не зададите их самостоятельно -ПРАКТИЧЕСКИ НИКАКИХ! Другими словами, вам придется добавить свойства и методы
// в прототип самостоятельно. Обычно это делается ДО того, как мы начнем использовать конструктор.

// ИТАК, создадим прототип объектов, представляющих собак. Сначала нам понадобится конструктор:

function Dog(name,breed, weight) {
	this.name = name; // Каждый экземпляр содержит отдельный набор свойств name, breed, weight, поэтому они будут включены в конструктор
	this.breed = breed;
	this.weight = weight;
	// Методы будут наследоваться от прототипа, в конструкторе они не нужны.
}

// ДАЛЕЕ мы хотим чтобы ПРОТОТИП содержал свойства species и bark, а также методы run и wag:

Dog.prototype.species = "Canine"; // Строка "Canine" задается свойству species прототипа.
// Для каждого метода соответствующая функция назначается свойствам bark, run и. wag прототипа.
Dog.prototype.bark = function() {
	if (this.weight > 25) {
		console.log(this.name + " says Woof!");
	} else {
		console.log(this.name + " says Yip!"); 
	}
};

Dog.prototype.run = function() {
	console.log("Run!");
};
// ПОЯСНЕНИЕ: Начинаем с объекта Dog и получаем его свойство prototype, которое содержит ссылку на объект со св-ом species
Dog.prototype.wag = function() {
	console.log("Wag!");
};


