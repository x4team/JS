// Конструктор для создания собак
// ВНИМАНИЕ! Имя конструктора начинается с БОЛЬШОЙ буквы, это внегласное правило для разработчиков
  // Конструктор выглядит как обычная функция. 
  // Параметры функции соответстсвуют свойства, которые должны передаваться при вызове для каждого создаваемого объекта.
function Dog(name, breed, weight) {
  // Эта часть больше похожа на олбъект: значения параметров присваиваются переменным, которые похожи на свойства.
  this.name = name;
  this.breed = breed;
  this.weight = weight;
  // Здесь не используются локальные переменные, как во многих функциях. Вместо них используется ключевое слово
  // this, которое ранее нам встречалось только внутри объектов.
  // ТАКЖЕ обратите внимание, что конструктор ничего не возвращает.
  // И также имена свойств и параметров не обязаны совпадать, но часто совпадатю - это еще одно удобное соглашение.
}

//Создаем собаку с кличкой Fido, смешанной породы и весом 38 фунтов
 var fido = new Dog("Fido", "Mixed", 38); //ИСПОЛЬЗУЕТСЯ оператор new!

 var spot = new Dog("Spot", "Chihuahua", 10);

/********
 Как происходит создание объекта?
 1) Сначала new создает новый, пустой объект
 2) Затем new заносит в this ссылку на новый объект
 3) После подготовки this вызывается функция Dog, которой передаются аргументы "Fido", "Mixed", 38
 4) Затем вызывается тело функции. Как и большинство конструкторов, Dog задает значения свойств только
    что созданного объекта this.
 5) Наконец, после того как функция Dog будет выполнена, оператор new возвращает this, то есть ссылку
    на только что созданный объект. Обратите внимание: ссылка this возвращается автоматически, вам не
    придется явно возвращать ее в своем коде. И после того как новый объект будет возвращен, эта ссылка
    присваивается переменной fido.
*********/


// МЕТОДЫ в конструкторах

function DogWithMethod(name, breed, weight) {
  this.name = name;
  this.breed = breed;
  this.weight = weight;
  // ЧТОБЫ добавить в создаваемые объекты метод bark, мы просто назначаем функцию(в данном случае анонимную свойству this.bark)
  this.bark = function() {
    if (this.weight > 25) {
      alert(this.name + " says Woof!");
    } else {
      alert(this.name + " says Yip!");
    }
  };
}

// Тест драйв
 var sharik = new DogWithMethod("Sharik", "Mixed", 38); 
 var tuzik = new DogWithMethod("Tuzik", "Mixed", 24);
 var muhtar = new DogWithMethod("Muhtar", "Ovcharka", 90);
 var dogs = [sharik, tuzik, muhtar];

 //Перебираем ссылки на объекты в массиве
 for (var i = 0; i < dogs.length; i++) {
  dogs[i].bark();
 }

/*****
 УПРАЖНЕНИЕ №1
 У нас есть конструктор для создания объектов, представляющих разные кофейные напитки, но в этом конструкторе
 нет методов.

 Нам понадобится метод getSize, который возвращает строку в зависимости от объема напитка (в унциях):
 8 - small
 12 - medium
 16 - large

 Также нужен метод toString, который возвращает строку с описанием заказа, например:
 "You've ordered a small House Blend coffe".

 Запишите свой код внизу, а затем протестируйте его в браузере. Попробуйте создать несколько напитков с разными
 объемами. Прежде чем двигаться дальше, сверьтесь с ответами.
 *****/

 function Coffee(roast, ounces) {
  this.roast = roast;
  this.ounces = ounces;
  this.getSize = function() {
    if(this.ounces > 15) {
      return "large";
    } else if (this.ounces < 12) {
      return "small";
    } else { return "medium";}
  };
  this.toString = function() {
    return "You've ordered a " +this.getSize()+" "+this.roast+" coffee.";
  };
 }

 var houseBlend = new Coffee("House Blend", 12);
 console.log(houseBlend.toString());

 var darkRoast = new Coffee("Dark Roast", 16);
 console.log(darkRoast.toString());
